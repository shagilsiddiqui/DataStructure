Q:Given a linked list, remove the nth node from the end of list and return its head.

For example,
Given linked list: 1->2->3->4->5, and n = 2.
After removing the second node from the end, the linked list becomes 1->2->3->5.

 Note:
If n is greater than the size of the list, remove the first node of the list.
Try doing it using constant additional space

Soln:
ListNode* Solution::removeNthFromEnd(ListNode* A, int B) {
    ListNode*fp=A;
    int count=1;
    int n;
    while(fp->next!=NULL){
        fp=fp->next;
        count++;
    }
    // if(count%2==0){
    //     n=(count*2)-2;
    //     cout<<n<<endl;
    // }
    // else{
    //     n=(count*2)-1;
    
    //     cout<<n<<endl;
    // }
    int k=count-B-1;
    ListNode* temp=A;
    if(k<=0){
        return A->next;
    }
    else{
    while(k--){
        temp=temp->next;
    }
        temp->next=temp->next->next;
        return A;
    }
}
